// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Layer {
    int NodeIn;
    int NodeOut;
};

StructuredBuffer<Layer> layers;
StructuredBuffer<float> Weights;
StructuredBuffer<float> Biases;
int numLayers;

float2 CalcOutputs(float2 inputs) {
    int counter = 0;
    int wCounter = 0;
    for (int i = 0; i < numLayers; i++)
    {
        float2 outputs = float2(0,0);
        [unroll(2)] for (int j = 0; j < layers[i].NodeOut; j++)
        {
            float output = Biases[counter];
            for (int k = 0; k < layers[i].NodeIn; k++)
            {
                output += inputs[k] * Weights[wCounter];
                wCounter++;
            }
            outputs[j] = output;
            counter++;
        }
        inputs = outputs;
    }
    return inputs;
}

float4 Classify(float2 inputs) {
    float2 output = CalcOutputs(inputs);
    if (output[0] >= output[1]) {
        return float4(1,0,0,150.0/255.0);
    }
    else {
        return float4(0, 1, 0, 150.0 / 255.0);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = Classify(float2(id.x/64.0,id.y/64.0));
}